//************************************************************************
class MapSearchNode{
public:
  unsigned int x;	 // the (x,y) positions of the node
  unsigned int y;	
  
  MapSearchNode() { x = y = 0; }
  MapSearchNode( unsigned int px, unsigned int py ) { x=px; y=py; }
  
  float GoalDistanceEstimate(MapSearchNode &nodeGoal){
    return pow((float)(x - nodeGoal.x),2)+pow((float)(y - nodeGoal.y),2);
  }
  bool IsGoal(MapSearchNode &nodeGoal);
  void GetSuccessors(AStarSearch<MapSearchNode> *astarsearch, MapSearchNode *parent_node );
  float GetCost( MapSearchNode &successor );
  bool IsSameState( MapSearchNode &rhs );
  void PrintNodeInfo(){printf("Node position : (%d,%d)\n", x,y );}
};

bool MapSearchNode::IsSameState( MapSearchNode &rhs ){
  // same state in a maze search is simply when (x,y) are the same
  return ((x == rhs.x) && (y == rhs.y));
}

bool MapSearchNode::IsGoal( MapSearchNode &nodeGoal ){
  return((x==nodeGoal.x) && (y==nodeGoal.y));
}

// This generates the successors to the given Node. 
// It uses a helper function called AddSuccessor to give the successors 
// to the AStar class. The A* specific initialisation is done for each node 
// internally, so here you just set the state information that
// is specific to the application
void MapSearchNode::GetSuccessors(AStarSearch<MapSearchNode> *astarsearch, MapSearchNode *parent_node ){
  int parent_x = -1; 
  int parent_y = -1; 
  if( parent_node ){
    parent_x = parent_node->x;
    parent_y = parent_node->y;
  }
  MapSearchNode NewNode;
  // push each possible move except allowing the search to go backwards
  if( (GetMap( x-1, y ) < 9) && !((parent_x == x-1) && (parent_y == y))) {
    NewNode = MapSearchNode( x-1, y );
    astarsearch->AddSuccessor( NewNode );
  }	
  if( (GetMap( x, y-1 ) < 9) && !((parent_x == x) && (parent_y == y-1))){
    NewNode = MapSearchNode( x, y-1 );
    astarsearch->AddSuccessor( NewNode );
  }	
  if( (GetMap( x+1, y ) < 9) && !((parent_x == x+1) && (parent_y == y))){
    NewNode = MapSearchNode( x+1, y );
    astarsearch->AddSuccessor( NewNode );
  }	
  if( (GetMap( x, y+1 ) < 9) && !((parent_x == x) && (parent_y == y+1))){
    NewNode = MapSearchNode( x, y+1 );
    astarsearch->AddSuccessor( NewNode );
  }	
}

// given this node, what does it cost to move to successor. In the case
// of our map the answer is the map terrain value at this node since that is 
// conceptually where we're moving

float MapSearchNode::GetCost( MapSearchNode &successor ){
  return (float) GetMap(x,y);
}
